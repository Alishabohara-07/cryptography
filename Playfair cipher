def prepare_text(text):
    # Remove spaces and convert to uppercase
    text = text.replace(" ", "").upper()
    # If the length of the text is odd, append 'X' to make it even
    if len(text) % 2 != 0:
        text += 'X'
    return text

def generate_playfair_matrix(key):
    # Remove duplicate characters from the key and convert to uppercase
    key = "".join(dict.fromkeys(key.upper()))
    # Initialize the matrix with the key
    matrix = [list(key)]
    # Fill the matrix with remaining alphabet characters
    for char in "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if char not in matrix[-1]:
            matrix[-1].append(char)
            if len(matrix[-1]) == 5:
                matrix.append([])
    return matrix

def find_positions(matrix, char):
    # Find the row and column indices of a character in the matrix
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == char:
                return i, j

def encrypt_pair(matrix, pair):
    # Find positions of characters in the matrix
    row1, col1 = find_positions(matrix, pair[0])
    row2, col2 = find_positions(matrix, pair[1])
    # Same row, take characters to the right, wrap around if necessary
    if row1 == row2:
        return matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
    # Same column, take characters below, wrap around if necessary
    elif col1 == col2:
        return matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
    # Form a rectangle, take characters at opposite corners
    else:
        return matrix[row1][col2] + matrix[row2][col1]

def decrypt_pair(matrix, pair):
    # Find positions of characters in the matrix
    row1, col1 = find_positions(matrix, pair[0])
    row2, col2 = find_positions(matrix, pair[1])
    # Same row, take characters to the left, wrap around if necessary
    if row1 == row2:
        return matrix[row1][(col1 - 1) % 5] + matrix[row2][(col2 - 1) % 5]
    # Same column, take characters above, wrap around if necessary
    elif col1 == col2:
        return matrix[(row1 - 1) % 5][col1] + matrix[(row2 - 1) % 5][col2]
    # Form a rectangle, take characters at opposite corners
    else:
        return matrix[row1][col2] + matrix[row2][col1]

def playfair_encrypt(plaintext, key):
    plaintext = prepare_text(plaintext)
    matrix = generate_playfair_matrix(key)
    ciphertext = ""
    for i in range(0, len(plaintext), 2):
        ciphertext += encrypt_pair(matrix, plaintext[i:i+2])
    return ciphertext

def playfair_decrypt(ciphertext, key):
    ciphertext = prepare_text(ciphertext)
    matrix = generate_playfair_matrix(key)
    plaintext = ""
    for i in range(0, len(ciphertext), 2):
        plaintext += decrypt_pair(matrix, ciphertext[i:i+2])
    return plaintext

# Main part
full_name = input("Enter your full name: ")
key = input("Enter the key for Playfair cipher: ").upper()  # Convert key to uppercase

# Encrypt the full name
encrypted_text = playfair_encrypt(full_name, key)
print(f"Encrypted text: {encrypted_text}")

# Decrypt the encrypted text back to the original
decrypted_text = playfair_decrypt(encrypted_text, key)
print(f"Decrypted text: {decrypted_text}")
